pipeline {
    agent any
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build') {
            steps {
                // Build Docker images for the server and frontend
                sh 'docker build -t guy66bp/appserver ./server'
                sh 'docker build -t guy66bp/appfront ./frontend'

                // Build image for Pytest
                sh 'docker build -t guy66bp/apptest ./test'
            }
        }
        stage('Deploy app containers') {
            steps {
                // Deploy Docker containers for the server and frontend
                sh 'docker run -d -p 3001:3001 guy66bp/appserver'
                sh 'sleep 2' // Give the container some time to start up
                sh 'docker run -d -p 3000:3000 guy66bp/appfront'
                sh 'sleep 2' // Give the container some time to start up
            }
        }
        stage('Run Tests') {
            steps {
                // Run pytest for your tests and generate the JUnit-style XML report
                sh 'pytest --junitxml=test-results/test-report.xml ./test'

                // Capture the exit code of pytest
                script {
                    def testContainerExitCode = sh(script: 'docker run -d guy66bp/apptest', returnStatus: true)
                    if (testContainerExitCode != 0) {
                        currentBuild.result = 'FAILURE' // Set the build result to FAILURE
                        error 'Tests failed! Pipeline failed.'
                    }
                }
            }
        }
    }
    post {
        always {
            // Publish the JUnit-style test results to the console
            junit 'test-results/test-report.xml'
        }
        success {
            // Only execute this block if the tests succeeded
            echo 'All tests passed! Pipeline succeeded.'
        }
        failure {
            // Only execute this block if the tests or any other stages failed
            echo 'Tests failed! Pipeline failed.'
        }
    }
}
